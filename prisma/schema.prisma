generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  name         String
  email        String  @unique
  password     String
  isTeacher    Boolean @default(false)
  enrollmentNo String? @unique

  createdCourses    Course[]
  joinedCourses     CourseStudent[]
  questionPoints    StudentQuestion[]
  StudentSubmission StudentSubmission[]
}

model Course {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  code        String @unique

  teacherId        Int
  enrolledStudents CourseStudent[]

  teacher User   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  tests   Test[]
}

model CourseStudent {
  userId   Int
  courseId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model Test {
  id               Int      @id @default(autoincrement())
  name             String
  startTime        DateTime
  endTime          DateTime
  allowedLanguages String[]
  evaluationScheme String
  visibility       String

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  questions Question[]
}


//todo: add constraints
//todo: change Test -> test
model Question {
  id        Int    @id @default(autoincrement())
  name      String
  statement String
  points    Int
  availablePoints Int

  testId Int
  Test   Test @relation(fields: [testId], references: [id], onDelete: Cascade)

  testCases TestCase? 

  exampleTestCases ExampleTestCase[]

  studentPoints     StudentQuestion[]
  StudentSubmission StudentSubmission[]

  solution      Code[] @relation("QuestionSolution")
}

model TestCase {
  id     Int    @id @default(autoincrement())
  input  String
  output String

  questionId Int @unique()
  Question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model ExampleTestCase {
  id           Int    @id @default(autoincrement())
  input        String
  output       String
  explaination String

  questionId Int
  Question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Code {
  id       Int    @id @default(autoincrement())
  language String
  code     String

  solQueId     Int?
  solQuestion  Question? @relation("QuestionSolution", fields: [solQueId], references: [id], onDelete: Cascade)
}

//todo: change name to student points
model StudentQuestion {
  userId     Int
  questionId Int
  points     Int

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([userId, questionId])
}

model Submission {
  id       Int      @id @default(autoincrement())
  code     String
  language String
  time     DateTime
  statusCode   Int 

  StudentSubmission StudentSubmission[]
}

model StudentSubmission {
  userId       Int
  questionId   Int
  submissionId Int

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@id([userId, questionId, submissionId])
}
