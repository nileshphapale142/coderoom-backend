// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  name         String
  email        String  @unique
  password     String
  isTeacher    Boolean @default(false)
  enrollmentNo String? @unique

  createdCourses  Course[]          @relation("TeacherCourses")
  joinedCourses   CourseStudent[]

  questionPoints StudentQuestion[]
}

model Course {
  id               Int             @id @default(autoincrement())
  name             String
  description      String
  code             String          @unique
  teacherId        Int
  teacher          User            @relation("TeacherCourses", fields: [teacherId], references: [id])
  enrolledStudents CourseStudent[]
  tests            Test[]          @relation("CourseTests")
}

model CourseStudent {
  userId   Int
  courseId Int
  user     User   @relation(fields: [userId], references: [id])
  course   Course @relation(fields: [courseId], references: [id])

  @@id([userId, courseId])
}

model Test {
  id               Int      @id @default(autoincrement())
  name             String
  startTime        DateTime
  endTime          DateTime
  allowedLanguages String[]
  evaluationScheme String
  visibility       String

  courseId Int
  course   Course @relation("CourseTests", fields: [courseId], references: [id])

  questions Question[]
}

model Question {
  id           Int    @id @default(autoincrement())
  name         String
  statement    String
  points       Int
  solution     String
  templateCode String

  testId          Int
  Test            Test @relation(fields: [testId], references: [id])

  studentPoints StudentQuestion[]
}

model StudentQuestion {
  userId     Int
  questionId Int
  points     Int

  user     User     @relation(fields: [userId], references: [id])
  question Question @relation(fields: [questionId], references: [id])

  @@id([userId, questionId])
}

model TestCase {
  id     Int    @id @default(autoincrement())
  input  String
  output String
}

model ExampleTestCase {
  id           Int    @id @default(autoincrement())
  input        String
  output       String
  explaination String
}

model Submission {
  id       Int      @id @default(autoincrement())
  code     String
  language String
  time     DateTime
  status   String
}
